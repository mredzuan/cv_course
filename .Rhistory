library(reticulate)
reticulate::repl_python()
import numpy
import cv2
import numpy as np
import numpy as np
mylist = [1,2,3]
type(mylist)
View(mylist)
myArray = np.array(mylist)
exit()
exit
py$myArray
py$mlist
py$mylist
typeof(py$mylist)
typeof(py$myArray)
class(py$myArray)
class(py$mylist)
reticulate::repl_python()
np.arange(0,10,2)
np.zeros(shape=(5,5))
np.zeros(shape=(10,5))
np.ones(shape=(2,4))
np.random.seed(101)
arr = np.random.randint(0,100,10)
arr2 = np.random.randint(0,100,10)
arr.max()
arr.argmax()
help numpy.argmax()
help numpy.argmax
?numpy.argmax
arr.min()
arr.argmin()
arr
arr.mean()
arr.shape
arr.reshape(2,6)
arr.reshape(2,5)
arr
arr.reshape(2,10)
arrReshape = arr.reshape(2,5)
exit()
exit
ls
py$arrReshape
str(py$arrReshape)
str(py$arr)
reticulate::repl_python()
import numpy as np
import numpy as np
mat = np.arange(0,100)
mat = np.arange(0,100).reshape(10,10)
mat = np.arange(0,100).reshape(10,10)
mat = np.arange(0,100).reshape(10,10).reshape(2,50)
mat
exit
matrix(data, nrow = rows, ncol = cols)
mat
py$mat
str(py$mat)
reticulate::repl_python()
mat = np.arange(0,100).reshape(10,10)
exit
str(py$mat)
py$mat
reticulate::repl_python()
mat = np.arange(0,100).reshape(10,10)
exit
reticulate::repl_python()
mat = np.arange(0,100).reshape(10,10)
mat
mat.shape
mat[4, 7]
mat[4, 5]
mat[4,6]
mat[4,6]
mat[:,1]
mat[:, 1].reshape(10,2)
mat[:, 1].reshape(10,1)
mat[2, :]
myNeMat = mat
myNeMat[0:6, :] = 999
myNeMat
mat
mat = np.arange(0,100).reshape(10,10)
mat.shape
mat[4,6]
mat[:,1]
mat[:, 1].reshape(10,1)
mat[2, :]
myNeMat = mat.copy()
myNeMat[0:6, :] = 999
myNeMat
mat
